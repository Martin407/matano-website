"use strict";(self.webpackChunk_matano_website=self.webpackChunk_matano_website||[]).push([[4977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={title:"Transformation",sidebar_position:3},s=void 0,i={unversionedId:"log-sources/transformation",id:"log-sources/transformation",title:"Transformation",description:"Matano allows you to transform your data into a normalized form. The transformation is specified using the Vector ReMap Language (VRL).",source:"@site/docs/log-sources/transformation.md",sourceDirName:"log-sources",slug:"/log-sources/transformation",permalink:"/docs/log-sources/transformation",draft:!1,editUrl:"https://github.com/matanolabs/matano-website/tree/main/website/docs/log-sources/transformation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Transformation",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Ingestion",permalink:"/docs/log-sources/ingestion"},next:{title:"Log source configuration",permalink:"/docs/log-sources/configuration"}},l={},u=[{value:"Using Matano managed log sources",id:"using-matano-managed-log-sources",level:3},{value:"Transformations",id:"transformations",level:2},{value:"Example: parsing JSON",id:"example-parsing-json",level:3},{value:"log_source.yml",id:"log_sourceyml",level:6},{value:"Writing transformation VRL expressions",id:"writing-transformation-vrl-expressions",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Matano allows you to transform your data into a normalized form. The transformation is specified using the ",(0,o.kt)("a",{parentName:"p",href:"https://vector.dev/docs/reference/vrl/"},"Vector ReMap Language (VRL)"),"."),(0,o.kt)("h3",{id:"using-matano-managed-log-sources"},"Using Matano managed log sources"),(0,o.kt)("p",null,"If you're using a ",(0,o.kt)("a",{parentName:"p",href:"/docs/log-sources/managed/"},"Matano managed log source"),", a transformation will be applied for you and you don't need to write a VRL expression to transform your data."),(0,o.kt)("h2",{id:"transformations"},"Transformations"),(0,o.kt)("p",null,"To apply a transformation to your log source, specify a VRL expression to transform your data as a string in the ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," key in your ",(0,o.kt)("inlineCode",{parentName:"p"},"log_source.yml")," file."),(0,o.kt)("h3",{id:"example-parsing-json"},"Example: parsing JSON"),(0,o.kt)("p",null,"Let's have a look at a simple example. Imagine that you're working with\nHTTP log events that look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "line":"{\\"status\\":200,\\"srcIpAddress\\":\\"1.1.1.1\\",\\"message\\":\\"SUCCESS\\",\\"username\\":\\"ub40fan4life\\"}"\n}\n')),(0,o.kt)("p",null,"You want to apply these changes to each event:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Parse the raw ",(0,o.kt)("inlineCode",{parentName:"li"},"line")," string into JSON, and explode the fields to the top level"),(0,o.kt)("li",{parentName:"ul"},"Rename ",(0,o.kt)("inlineCode",{parentName:"li"},"srcIpAddress")," to the ",(0,o.kt)("inlineCode",{parentName:"li"},"source.ip")," ECS field"),(0,o.kt)("li",{parentName:"ul"},"Remove the ",(0,o.kt)("inlineCode",{parentName:"li"},"username")," field"),(0,o.kt)("li",{parentName:"ul"},"Convert the ",(0,o.kt)("inlineCode",{parentName:"li"},"message")," to lowercase")),(0,o.kt)("p",null,"Adding this VRL program to your log source as a ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," step would accomplish all of that:"),(0,o.kt)("h6",{id:"log_sourceyml"},"log_source.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"transform: |\n  . = object!(parse_json!(string!(.line)))\n  .source.ip = del(.srcIpAddress)\n  del(.username)\n  .message = downcase(string!(.message))\n\nschema:\n  ecs_field_names:\n  - source.ip\n  - http.status\n")),(0,o.kt)("p",null,"The resulting event \ud83c\udf89:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "success",\n  "status": 200,\n  "source": {\n    "ip": "1.1.1.1"\n  }\n}\n')),(0,o.kt)("h3",{id:"writing-transformation-vrl-expressions"},"Writing transformation VRL expressions"),(0,o.kt)("p",null,"The input to your VRL expression is a single record from your data source. The output of the VRL expression is the transformed record."))}c.isMDXComponent=!0}}]);